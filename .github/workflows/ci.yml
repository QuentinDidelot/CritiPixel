name: Continuous integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  symfony-tests:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: mysql://root@127.0.0.1:3306/criti-pixel_test # Utilisation de la base de test

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes" # Autoriser l'utilisateur root sans mot de passe
          MYSQL_DATABASE: criti-pixel_test   # Création automatique de la base de test pour les tests
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # Installer PHP
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      # Récupérer le code source
      - uses: actions/checkout@v4

      # Copier le fichier de configuration .env.test.local si nécessaire
      - name: Copy .env.test.local
        run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"

      # Mise en cache des packages Composer
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Installation des dépendances
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      # Attendre que MySQL soit prêt
      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -u root; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      # Créer et initialiser la base de données de test
      - name: Create Database
        run: |
          symfony console doctrine:database:drop --force --if-exists --env=test
          symfony console doctrine:database:create --env=test
          symfony console doctrine:schema:update --force --env=test 
          symfony console doctrine:fixtures:load --env=test --no-interaction

      # Exécuter les tests PHPUnit
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit
